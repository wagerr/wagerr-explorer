require('babel-polyfill')
const blockchain = require('../lib/blockchain')
const {exit, rpc} = require('../lib/cron')
const {forEachSeries} = require('p-iteration')
const locker = require('../lib/locker')
const opCode = require('../lib/op_code')
const util = require('./util')
const methods = require('./methods')

// Models.
const Block = require('../model/block')
const BetAction = require('../model/betaction')
const BetEvent = require('../model/betevent')
const BetResult = require('../model/betresult')
const Betupdate = require('../model/betupdate')
const Betspread = require('../model/betspread')
const Bettotal = require('../model/bettotal')
const Transaction = require('../model/transaction')
const TX = require('../model/tx')

function hexToString (hexx) {
  var hex = hexx.toString()//force conversion
  var str = ''
  for (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)
    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16))
  return str
}

async function preOPCode(block, rpctx, vout) {
  let opString = hexToString(vout.scriptPubKey.asm.substring(10))
  let datas = opString.split('|')
  if (datas[0] === '1' && datas.length === 11) {
    BetEvent.create({
      _id: datas[2]+rpctx.txid,
      txId: rpctx.txid,
      blockHeight: block.height,
      createdAt: block.createdAt,
      eventId: datas[2],
      timeStamp:  datas[3],
      league:  datas[4],
      info:  datas[5],
      homeTeam:  datas[6],
      awayTeam:  datas[7],
      homeOdds:  datas[8],
      awayOdds:  datas[9],
      drawOdds: datas[10],
      opString: opString,
    })
  } else if (datas[0] === '2' && datas.length === 4) {
    try {
      await BetAction.create({
        _id: datas[2]+datas[3]+rpctx.txid,
        txId: rpctx.txid,
        blockHeight: block.height,
        createdAt: block.createdAt,
        eventId: datas[2],
        betChoose: datas[3],
        betValue: vout.value,
        opString: opString,
      })
    } catch (e) {
      //console.log('Error saving bet action with old decryption method');
    }
  } else if (datas[0] === '3' && datas.length === 4) {
    let resultPayoutTxs = await TX.find({blockHeight: block.height+1})
    BetResult.create({
      _id: datas[2]+rpctx.txid,
      txId: rpctx.txid,
      blockHeight: block.height,
      createdAt: block.createdAt,
      eventId: datas[2],
      result: datas[3],
      opString: opString,
      payoutTx: resultPayoutTxs[0]
    })
  } else if (datas[0] === '4' && datas.length === 4){
    let resultPayoutTxs = await TX.find({blockHeight: block.height+1})
    BetResult.create({
      _id: datas[2]+rpctx.txid,
      txId: rpctx.txid,
      blockHeight: block.height,
      createdAt: block.createdAt,
      eventId: datas[2],
      result: 'REFUND '+datas[3],
      opString: opString,
      payoutTx: resultPayoutTxs[0]
    })
  }
}

async function recordExists(rType, val, recordType = '_id') {
  let response;
  try {
    response = await rType.findOne({ [recordType]: val });
  } catch (e) {
    console.log('bet.js:recordExists');
    console.log(e);
  }

  return response;
}

async function saveOPTransaction(block, rpctx, vout, transaction) {
  let createResponse;
  const timeNow = Date.now();

  if (['peerlessEvent'].includes(transaction.txType)) {
    const _id = `${transaction.eventId}${rpctx.txid}${block.height}`;
    // const _id = `${transaction.eventId}`;
    const eventExists = await recordExists(BetEvent, _id);

    if (eventExists) {
      //console.log(`Bet event ${_id} already on record`);
      return eventExists;
    }

    try {
      createResponse = await BetEvent.create({
        _id,
        txId: rpctx.txid,
        blockHeight: block.height,
        createdAt: block.createdAt,
        eventId: transaction.eventId,
        timeStamp:  transaction.timestamp,
        league:  transaction.tournament,
        info:  `R${transaction.round}`,
        homeTeam:  transaction.homeTeam,
        awayTeam:  transaction.awayTeam,
        homeOdds:  transaction.homeOdds,
        awayOdds:  transaction.
